name: Build

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  build-native:
    strategy:
      matrix:
        version: [14, 16, 18]
        target:
          - name: macos
            os: macos-latest
            artifact: darwin-x64-unknown
            arch: x64
            script: pack-all
          - name: windows 64 bits
            os: windows-2019
            artifact: win32-x64-unknown
            arch: x64
            script: pack-all-windows
    
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.version }}
          architecture: ${{ matrix.target.arch }}
      - uses: actions/setup-python@v2
        with:
          python-version: '>3.6.0'
          architecture: ${{ matrix.target.arch }}
      - run: npm i --ignore-scripts
      - run: npm run ${{ matrix.target.script }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.artifact }}-${{ matrix.version }}
          path: dist/iastnativemethods.node

  build-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [14, 16, 18]
        target:
          - dockerfile: Dockerfile
            libc: libc
            artifact: linux-x64-glibc
            artifactpath: bundle-pack.zip
          - dockerfile: alpine.Dockerfile
            libc: musl
            artifact: linux-x64-musl
            artifactpath: linux-x64-musl.tgz
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: npm i --ignore-scripts
        env:
          PLATFORM: 'linux'
          LIBC: ${{ matrix.target.libc }}
      - run: docker build -t build --build-arg NODE_VERSION=${{ matrix.version }} -f ./docker/${{ matrix.target.dockerfile }} .
      - run: docker run --name builder build
      - run: docker cp builder:/build/dist/iastnativemethods.node .
      - run: docker run --name tester build test ci
      - run: docker cp tester:/build/test/cpputest/results/ .
      - uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/results/cpputest_*.xml'
          check_name: junit test report ${{ matrix.target.name }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.artifact }}-${{ matrix.version }}
          path: iastnativemethods.node

  cpp-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
      - run: pip install cpplint
      - run: cpplint --filter=-build/include_subdir --linelength=120 --recursive ./src

  all-good:
    needs:
      - build-native
      - build-docker
      - cpp-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - run: cd artifacts && tar cf release.tar *
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: artifacts/release.tar
